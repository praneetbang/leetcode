/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int res=0;
    public int pseudoPalindromicPaths (TreeNode root) {
        dfs(root, new HashMap<>());
        return res;
    }

    public void dfs(TreeNode node, HashMap<Integer, Integer> map){
        if(node==null) return;
        map.put(node.val, map.getOrDefault(node.val, 0)+1);
        if(node.left==null && node.right==null){
            res += checkPalindrome(map);
            map.put(node.val, map.get(node.val)-1);
            return;
        }
        dfs(node.left, map);
        dfs(node.right, map);
        map.put(node.val, map.get(node.val)-1);
    }
    public int checkPalindrome(HashMap<Integer, Integer> map){
        boolean odd = false;
        if (map.size()==0) {
            return 0;
        }
        for(int n:map.values()){
            if(n%2!=0){
                if(odd==true) return 0;
                else odd = true;
            }
        }
        return 1;
    }
}

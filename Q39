class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList();
        backtrack(target, new LinkedList<Integer>(), 0, candidates, res);
        return res;
    }

    private void backtrack(int rem, LinkedList<Integer> comb, int start, int[] candidates, List<List<Integer>> res){
        if(rem==0){
            res.add(new ArrayList<Integer>(comb));
        } else if(rem<0){
            return;
        }

        for(int i=start;i<candidates.length;i++){
            comb.add(candidates[i]);
            backtrack(rem - candidates[i], comb, i, candidates, res);
            comb.removeLast();
        }
    }
}

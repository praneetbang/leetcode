class Solution {
    int memo[] = new int[50001];

    private int findNextIndex(int[] startTime, int lastEndingTime){
        int start=0, end = startTime.length-1, nextIndex = startTime.length;

        while (start<=end) {
            int mid = (start+end)/2;
            if(startTime[mid]>=lastEndingTime){
                nextIndex = mid;
                end=mid-1;
            }else{
                start = mid+1;
            }
        }
        return nextIndex;
    }

    private int findMaxProfit(List<List<Integer>> jobs, int[] startTime,int n, int position){
        if(position==n){
            return 0;
        }

        if(memo[position]!=-1){
            return memo[position];
        }

        int nextIndex = findNextIndex(startTime, jobs.get(position).get(1));

        memo[position] = Math.max(findMaxProfit(jobs, startTime, n, position+1),jobs.get(position).get(2)+findMaxProfit(jobs, startTime, n, nextIndex));
        return memo[position];
    }

    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        List<List<Integer>> jobs = new ArrayList<>();

        Arrays.fill(memo, -1);
        int length = profit.length;

        for(int i=0;i<length;i++){
            List<Integer> job = new ArrayList<>();
            job.add(startTime[i]);
            job.add(endTime[i]);
            job.add(profit[i]);
            jobs.add(job);
        }

        jobs.sort(Comparator.comparingInt(a -> a.get(0)));

        for(int i=0;i<length;i++){
            startTime[i] = jobs.get(i).get(0);
        }
    
        return findMaxProfit(jobs, startTime, length, 0);
    }
}
